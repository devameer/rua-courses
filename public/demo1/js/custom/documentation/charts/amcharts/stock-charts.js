/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/demo1/js/custom/documentation/charts/amcharts/stock-charts.js":
/*!****************************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/documentation/charts/amcharts/stock-charts.js ***!
  \****************************************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTGeneralAmChartsMaps = function () {\n  // Shared variables\n  var chart; // Private functions\n\n  var _demo1 = function _demo1() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v4/\n    am4core.ready(function () {\n      // Themes begin\n      am4core.useTheme(am4themes_animated); // Themes end\n      // Create chart\n\n      chart = am4core.create(\"kt_amcharts_1\", am4charts.XYChart);\n      chart.padding(0, 15, 0, 15); // Load external data\n\n      chart.dataSource.url = \"https://www.amcharts.com/wp-content/uploads/assets/stock/MSFT.csv\";\n      chart.dataSource.parser = new am4core.CSVParser();\n      chart.dataSource.parser.options.useColumnNames = true;\n      chart.dataSource.parser.options.reverse = true; // the following line makes value axes to be arranged vertically.\n\n      chart.leftAxesContainer.layout = \"vertical\"; // uncomment this line if you want to change order of axes\n      //chart.bottomAxesContainer.reverseOrder = true;\n\n      var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n      dateAxis.renderer.grid.template.location = 0;\n      dateAxis.renderer.ticks.template.length = 8;\n      dateAxis.renderer.ticks.template.strokeOpacity = 0.1;\n      dateAxis.renderer.grid.template.disabled = true;\n      dateAxis.renderer.ticks.template.disabled = false;\n      dateAxis.renderer.ticks.template.strokeOpacity = 0.2;\n      dateAxis.renderer.minLabelPosition = 0.01;\n      dateAxis.renderer.maxLabelPosition = 0.99;\n      dateAxis.keepSelection = true;\n      dateAxis.minHeight = 30;\n      dateAxis.groupData = true;\n      dateAxis.minZoomCount = 5; // these two lines makes the axis to be initially zoomed-in\n      // dateAxis.start = 0.7;\n      // dateAxis.keepSelection = true;\n\n      var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n      valueAxis.tooltip.disabled = true;\n      valueAxis.zIndex = 1;\n      valueAxis.renderer.baseGrid.disabled = true; // height of axis\n\n      valueAxis.height = am4core.percent(65);\n      valueAxis.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\n      valueAxis.renderer.gridContainer.background.fillOpacity = 0.05;\n      valueAxis.renderer.inside = true;\n      valueAxis.renderer.labels.template.verticalCenter = \"bottom\";\n      valueAxis.renderer.labels.template.padding(2, 2, 2, 2); //valueAxis.renderer.maxLabelPosition = 0.95;\n\n      valueAxis.renderer.fontSize = \"0.8em\";\n      var series = chart.series.push(new am4charts.LineSeries());\n      series.dataFields.dateX = \"Date\";\n      series.dataFields.valueY = \"Adj Close\";\n      series.tooltipText = \"{valueY.value}\";\n      series.name = \"MSFT: Value\";\n      series.defaultState.transitionDuration = 0;\n      var valueAxis2 = chart.yAxes.push(new am4charts.ValueAxis());\n      valueAxis2.tooltip.disabled = true; // height of axis\n\n      valueAxis2.height = am4core.percent(35);\n      valueAxis2.zIndex = 3; // this makes gap between panels\n\n      valueAxis2.marginTop = 30;\n      valueAxis2.renderer.baseGrid.disabled = true;\n      valueAxis2.renderer.inside = true;\n      valueAxis2.renderer.labels.template.verticalCenter = \"bottom\";\n      valueAxis2.renderer.labels.template.padding(2, 2, 2, 2); //valueAxis.renderer.maxLabelPosition = 0.95;\n\n      valueAxis2.renderer.fontSize = \"0.8em\";\n      valueAxis2.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\n      valueAxis2.renderer.gridContainer.background.fillOpacity = 0.05;\n      var series2 = chart.series.push(new am4charts.ColumnSeries());\n      series2.dataFields.dateX = \"Date\";\n      series2.dataFields.valueY = \"Volume\";\n      series2.yAxis = valueAxis2;\n      series2.tooltipText = \"{valueY.value}\";\n      series2.name = \"MSFT: Volume\"; // volume should be summed\n\n      series2.groupFields.valueY = \"sum\";\n      series2.defaultState.transitionDuration = 0;\n      chart.cursor = new am4charts.XYCursor();\n      var scrollbarX = new am4charts.XYChartScrollbar();\n      scrollbarX.series.push(series);\n      scrollbarX.marginBottom = 20;\n      scrollbarX.scrollbarChart.xAxes.getIndex(0).minHeight = undefined;\n      chart.scrollbarX = scrollbarX;\n    }); // end am4core.ready()\n  };\n\n  var _demo2 = function _demo2() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v4/\n    am4core.ready(function () {\n      // Themes begin\n      am4core.useTheme(am4themes_animated); // Themes end\n\n      chart = am4core.create(\"kt_amcharts_2\", am4charts.XYChart);\n      chart.padding(0, 15, 0, 15);\n      chart.colors.step = 3;\n      var data = [];\n      var price1 = 1000;\n      var price2 = 2000;\n      var price3 = 3000;\n      var quantity = 1000;\n\n      for (var i = 15; i < 3000; i++) {\n        price1 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 100);\n        price2 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 100);\n        price3 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 100);\n\n        if (price1 < 100) {\n          price1 = 100;\n        }\n\n        if (price2 < 100) {\n          price2 = 100;\n        }\n\n        if (price3 < 100) {\n          price3 = 100;\n        }\n\n        quantity += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 500);\n\n        if (quantity < 0) {\n          quantity *= -1;\n        }\n\n        data.push({\n          date: new Date(2000, 0, i),\n          price1: price1,\n          price2: price2,\n          price3: price3,\n          quantity: quantity\n        });\n      }\n\n      chart.data = data; // the following line makes value axes to be arranged vertically.\n\n      chart.leftAxesContainer.layout = \"vertical\"; // uncomment this line if you want to change order of axes\n      //chart.bottomAxesContainer.reverseOrder = true;\n\n      var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n      dateAxis.renderer.grid.template.location = 0;\n      dateAxis.renderer.ticks.template.length = 8;\n      dateAxis.renderer.ticks.template.strokeOpacity = 0.1;\n      dateAxis.renderer.grid.template.disabled = true;\n      dateAxis.renderer.ticks.template.disabled = false;\n      dateAxis.renderer.ticks.template.strokeOpacity = 0.2;\n      dateAxis.renderer.minLabelPosition = 0.01;\n      dateAxis.renderer.maxLabelPosition = 0.99;\n      dateAxis.keepSelection = true;\n      dateAxis.groupData = true;\n      dateAxis.minZoomCount = 5; // these two lines makes the axis to be initially zoomed-in\n      // dateAxis.start = 0.7;\n      // dateAxis.keepSelection = true;\n\n      var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n      valueAxis.tooltip.disabled = true;\n      valueAxis.zIndex = 1;\n      valueAxis.renderer.baseGrid.disabled = true; // height of axis\n\n      valueAxis.height = am4core.percent(65);\n      valueAxis.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\n      valueAxis.renderer.gridContainer.background.fillOpacity = 0.05;\n      valueAxis.renderer.inside = true;\n      valueAxis.renderer.labels.template.verticalCenter = \"bottom\";\n      valueAxis.renderer.labels.template.padding(2, 2, 2, 2); //valueAxis.renderer.maxLabelPosition = 0.95;\n\n      valueAxis.renderer.fontSize = \"0.8em\";\n      var series1 = chart.series.push(new am4charts.LineSeries());\n      series1.dataFields.dateX = \"date\";\n      series1.dataFields.valueY = \"price1\";\n      series1.dataFields.valueYShow = \"changePercent\";\n      series1.tooltipText = \"{name}: {valueY.changePercent.formatNumber('[#0c0]+#.00|[#c00]#.##|0')}%\";\n      series1.name = \"Stock A\";\n      series1.tooltip.getFillFromObject = false;\n      series1.tooltip.getStrokeFromObject = true;\n      series1.tooltip.background.fill = am4core.color(\"#fff\");\n      series1.tooltip.background.strokeWidth = 2;\n      series1.tooltip.label.fill = series1.stroke;\n      var series2 = chart.series.push(new am4charts.LineSeries());\n      series2.dataFields.dateX = \"date\";\n      series2.dataFields.valueY = \"price2\";\n      series2.dataFields.valueYShow = \"changePercent\";\n      series2.tooltipText = \"{name}: {valueY.changePercent.formatNumber('[#0c0]+#.00|[#c00]#.##|0')}%\";\n      series2.name = \"Stock B\";\n      series2.tooltip.getFillFromObject = false;\n      series2.tooltip.getStrokeFromObject = true;\n      series2.tooltip.background.fill = am4core.color(\"#fff\");\n      series2.tooltip.background.strokeWidth = 2;\n      series2.tooltip.label.fill = series2.stroke;\n      var series3 = chart.series.push(new am4charts.LineSeries());\n      series3.dataFields.dateX = \"date\";\n      series3.dataFields.valueY = \"price3\";\n      series3.dataFields.valueYShow = \"changePercent\";\n      series3.tooltipText = \"{name}: {valueY.changePercent.formatNumber('[#0c0]+#.00|[#c00]#.##|0')}%\";\n      series3.name = \"Stock C\";\n      series3.tooltip.getFillFromObject = false;\n      series3.tooltip.getStrokeFromObject = true;\n      series3.tooltip.background.fill = am4core.color(\"#fff\");\n      series3.tooltip.background.strokeWidth = 2;\n      series3.tooltip.label.fill = series3.stroke;\n      var valueAxis2 = chart.yAxes.push(new am4charts.ValueAxis());\n      valueAxis2.tooltip.disabled = true; // height of axis\n\n      valueAxis2.height = am4core.percent(35);\n      valueAxis2.zIndex = 3; // this makes gap between panels\n\n      valueAxis2.marginTop = 30;\n      valueAxis2.renderer.baseGrid.disabled = true;\n      valueAxis2.renderer.inside = true;\n      valueAxis2.renderer.labels.template.verticalCenter = \"bottom\";\n      valueAxis2.renderer.labels.template.padding(2, 2, 2, 2); //valueAxis.renderer.maxLabelPosition = 0.95;\n\n      valueAxis2.renderer.fontSize = \"0.8em\";\n      valueAxis2.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\n      valueAxis2.renderer.gridContainer.background.fillOpacity = 0.05;\n      var volumeSeries = chart.series.push(new am4charts.StepLineSeries());\n      volumeSeries.fillOpacity = 1;\n      volumeSeries.fill = series1.stroke;\n      volumeSeries.stroke = series1.stroke;\n      volumeSeries.dataFields.dateX = \"date\";\n      volumeSeries.dataFields.valueY = \"quantity\";\n      volumeSeries.yAxis = valueAxis2;\n      volumeSeries.tooltipText = \"Volume: {valueY.value}\";\n      volumeSeries.name = \"Series 2\"; // volume should be summed\n\n      volumeSeries.groupFields.valueY = \"sum\";\n      volumeSeries.tooltip.label.fill = volumeSeries.stroke;\n      chart.cursor = new am4charts.XYCursor();\n      var scrollbarX = new am4charts.XYChartScrollbar();\n      scrollbarX.series.push(series1);\n      scrollbarX.marginBottom = 20;\n      var sbSeries = scrollbarX.scrollbarChart.series.getIndex(0);\n      sbSeries.dataFields.valueYShow = undefined;\n      chart.scrollbarX = scrollbarX;\n    }); // end am4core.ready()\n  };\n\n  var _demo3 = function _demo3() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v4/\n    am4core.ready(function () {\n      // Themes begin\n      am4core.useTheme(am4themes_animated); // Themes end\n      // Create chart instance\n\n      chart = am4core.create(\"kt_amcharts_3\", am4charts.XYChart); // Add data\n\n      chart.data = [{\n        \"year\": \"2011\",\n        \"value\": 600000\n      }, {\n        \"year\": \"2012\",\n        \"value\": 900000\n      }, {\n        \"year\": \"2013\",\n        \"value\": 180000\n      }, {\n        \"year\": \"2014\",\n        \"value\": 600000\n      }, {\n        \"year\": \"2015\",\n        \"value\": 350000\n      }, {\n        \"year\": \"2016\",\n        \"value\": 600000\n      }, {\n        \"year\": \"2017\",\n        \"value\": 670000\n      }]; // Populate data\n\n      for (var i = 0; i < chart.data.length - 1; i++) {\n        chart.data[i].valueNext = chart.data[i + 1].value;\n      } // Create axes\n\n\n      var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\n      categoryAxis.dataFields.category = \"year\";\n      categoryAxis.renderer.grid.template.location = 0;\n      categoryAxis.renderer.minGridDistance = 30;\n      var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n      valueAxis.min = 0; // Create series\n\n      var series = chart.series.push(new am4charts.ColumnSeries());\n      series.dataFields.valueY = \"value\";\n      series.dataFields.categoryX = \"year\"; // Add series for showing variance arrows\n\n      var series2 = chart.series.push(new am4charts.ColumnSeries());\n      series2.dataFields.valueY = \"valueNext\";\n      series2.dataFields.openValueY = \"value\";\n      series2.dataFields.categoryX = \"year\";\n      series2.columns.template.width = 1;\n      series2.fill = am4core.color(\"#555\");\n      series2.stroke = am4core.color(\"#555\"); // Add a triangle for arrow tip\n\n      var arrow = series2.bullets.push(new am4core.Triangle());\n      arrow.width = 10;\n      arrow.height = 10;\n      arrow.horizontalCenter = \"middle\";\n      arrow.verticalCenter = \"top\";\n      arrow.dy = -1; // Set up a rotation adapter which would rotate the triangle if its a negative change\n\n      arrow.adapter.add(\"rotation\", function (rotation, target) {\n        return getVariancePercent(target.dataItem) < 0 ? 180 : rotation;\n      }); // Set up a rotation adapter which adjusts Y position\n\n      arrow.adapter.add(\"dy\", function (dy, target) {\n        return getVariancePercent(target.dataItem) < 0 ? 1 : dy;\n      }); // Add a label\n\n      var label = series2.bullets.push(new am4core.Label());\n      label.padding(10, 10, 10, 10);\n      label.text = \"\";\n      label.fill = am4core.color(\"#0c0\");\n      label.strokeWidth = 0;\n      label.horizontalCenter = \"middle\";\n      label.verticalCenter = \"bottom\";\n      label.fontWeight = \"bolder\"; // Adapter for label text which calculates change in percent\n\n      label.adapter.add(\"textOutput\", function (text, target) {\n        var percent = getVariancePercent(target.dataItem);\n        return percent ? percent + \"%\" : text;\n      }); // Adapter which shifts the label if it's below the variance column\n\n      label.adapter.add(\"verticalCenter\", function (center, target) {\n        return getVariancePercent(target.dataItem) < 0 ? \"top\" : center;\n      }); // Adapter which changes color of label to red\n\n      label.adapter.add(\"fill\", function (fill, target) {\n        return getVariancePercent(target.dataItem) < 0 ? am4core.color(\"#c00\") : fill;\n      });\n\n      function getVariancePercent(dataItem) {\n        if (dataItem) {\n          var value = dataItem.valueY;\n          var openValue = dataItem.openValueY;\n          var change = value - openValue;\n          return Math.round(change / openValue * 100);\n        }\n\n        return 0;\n      }\n    }); // end am4core.ready()\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      _demo1();\n\n      _demo2();\n\n      _demo3();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTGeneralAmChartsMaps.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/documentation/charts/amcharts/stock-charts.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/documentation/charts/amcharts/stock-charts.js"]();
/******/ 	
/******/ })()
;